import com.sun.xml.internal.bind.v2.runtime.unmarshaller.XsiNilLoader;import java.util.ArrayList;import java.util.Arrays;import java.util.List;public class L301RemoveInvalidParentheses {    public static void main(String[] args) {        String s = ")(f";        new L301RemoveInvalidParentheses().new Solution().removeInvalidParentheses(s);    }    public class Solution {        public List<String> removeInvalidParentheses(String s) {            int count = 0, left = 0, right = 0;            char[] cs = s.toCharArray();            for (char c : cs) {                if (c == '(') {                    ++count;                } else if (c == ')') {                    if (count == 0) {                        ++right;                    } else {                        --count;                    }                }            }            left = count;            count = 0;            if (left == 0 && right == 0) {                return Arrays.asList(s);            }            List<String> re = new ArrayList<String>();            StringBuilder sb = new StringBuilder();            dfs(cs, 0, count, left, right, re, sb);            return re;        }        private void dfs(char[] cs, int cur, int count, int left, int right, List<String> re, StringBuilder sb) {            if (count < 0) {                return;            }            if (cur == cs.length) {                if (left == 0 && right == 0) {                    re.add(sb.toString());                }                return;            }            if (cs[cur] == '(') {                int i = 1;                while (cur + i < cs.length && cs[cur + i] == '(') {                    ++i;                }                sb.append(cs, cur, i);                dfs(cs, cur + i, count + i, left, right, re, sb);                sb.delete(sb.length() - i, sb.length());                if (left > 0) {                    dfs(cs, cur + 1, count, left - 1, right, re, sb);                }            } else if (cs[cur] == ')') {                int i = 1;                while (cur + i < cs.length && cs[cur + i] == ')') {                    ++i;                }                sb.append(cs, cur, i);                dfs(cs, cur + i, count - i, left, right, re, sb);                sb.delete(sb.length() - i, sb.length());                if (right > 0) {                    dfs(cs, cur + 1, count, left, right - 1, re, sb);                }            } else {                sb.append(cs[cur]);                dfs(cs, cur + 1, count, left, right, re, sb);                sb.deleteCharAt(sb.length() - 1);            }        }    }}